type ActionType = variant { Registration; DataSubmission; Validation; Governance };

type DataSubmission = record {
  id : nat64;
  submitter : principal;
  data : text;
  validated : bool;
  validator : opt principal;
  submitted_at : nat64;
};

type EcoError = variant {
  UserNotFound;
  InsufficientBalance;
  ProposalNotFound;
  ProposalNotActive;
  AlreadyVoted;
  Unauthorized;
  DataNotFound;
  AlreadyValidated;
};

type Proposal = record {
  id : nat64;
  creator : principal;
  description : text;
  yes_votes : nat64;
  no_votes : nat64;
  is_active : bool;
  created_at : nat64;
  voters : vec principal;
};

type Result = variant { Ok : User; Err : EcoError };
type Result_1 = variant { Ok : nat64; Err : EcoError };
type Result_2 = variant { Ok : DataSubmission; Err : EcoError };
type Result_3 = variant { Ok : Proposal; Err : EcoError };

type User = record {
  
  balance : nat64;
  registered_at : nat64;
};

type VoteChoice = variant { Yes; No };

service : {
  create_proposal : (text) -> (Result_3);
  get_active_proposals : () -> (vec Proposal) query;
  get_all_proposals : () -> (vec Proposal) query;
  get_proposal : (nat64) -> (Result_3) query;
  get_system_stats : () -> (vec record { text; nat64 }) query;
  get_total_supply : () -> (nat64) query;
  get_unvalidated_data : () -> (vec DataSubmission) query;
  get_user_balance : () -> (Result_1) query;
  get_user_info : () -> (Result) query;
  register_user : () -> (Result);
  submit_data : (text) -> (Result_2);
  validate_data : (nat64) -> (Result_2);
  vote_on_proposal : (nat64, VoteChoice) -> (Result_3);
}
